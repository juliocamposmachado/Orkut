// Orkut 2025 - IA Backend Manager
// Sistema completo de gerenciamento autom√°tico via IA Gemini
// A IA √© o C√âREBRO que controla todo o backend automaticamente

// =============================================================================
// CONFIGURA√á√ïES PRINCIPAIS DA IA BACKEND
// =============================================================================

const AI_BACKEND_CONFIG = {
    // API Gemini - Gerenciador Principal
    GEMINI_API_KEY: "AIzaSyB8QXNgbYg6xZWVyYdI8bw64Kr8BmRlWGk",
    GEMINI_API_URL: "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent",
    
    // Supabase - Banco de Dados Principal
    SUPABASE_URL: "https://ksskokjrdzqghhuahjpl.supabase.co",
    SUPABASE_ANON_KEY: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imtzc2tva2pyZHpxZ2hodWFoanBsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU1NDUzMTEsImV4cCI6MjA3MTEyMTMxMX0.tyQ15i2ypP7BW5UCKOkptJFCHo5IDdRD4ojzcmHSpK4",
    
    // Configura√ß√µes de Comportamento
    PRIORITY_BACKEND: true,        // Backend √© PRIORIDADE M√ÅXIMA
    INTERACTION_OPTIONAL: true,    // Intera√ß√£o com usu√°rio √© OPCIONAL
    AUTO_UI_ADJUSTMENT: true,      // Ajustes autom√°ticos de UI
    FULL_DATABASE_ACCESS: true,    // Acesso COMPLETO ao banco
    
    // Intervalos de Opera√ß√£o (em milissegundos)
    BACKEND_CYCLE_INTERVAL: 5000,   // Verifica backend a cada 5s
    UI_ADJUSTMENT_INTERVAL: 3000,   // Ajusta UI a cada 3s
    DATABASE_SYNC_INTERVAL: 10000,  // Sincroniza banco a cada 10s
    HEALTH_CHECK_INTERVAL: 15000    // Health check a cada 15s
};

// =============================================================================
// PERSONAS ESPECIALIZADAS DA IA
// =============================================================================

const AI_PERSONAS = {
    // Persona 1: ORKY-DB-AI - Gerenciador Especializado Supabase
    ORKY_DB_AI: {
        name: "ORKY-DB-AI",
        role: "Supabase Backend Manager",
        specialization: "Gerenciamento TOTAL do Supabase - Backend Local ‚Üí Cloud",
        responsibilities: [
            "üîÑ Sincronizar TODOS os dados com Supabase em tempo real",
            "üìù Atualizar banco a cada post, scrap, curtida, coment√°rio",
            "üë• Gerenciar perfis, amigos, comunidades automaticamente",
            "üìä Manter estat√≠sticas de usu√°rios sempre atualizadas",
            "üîê Validar e sanitizar dados antes de inserir",
            "‚ö° Otimizar queries para m√°xima performance",
            "üõ°Ô∏è Garantir integridade e consist√™ncia dos dados",
            "üì± Funcionar offline e sincronizar quando voltar online",
            "üîç Monitorar sa√∫de e performance do Supabase",
            "üíæ Criar backups autom√°ticos e recovery"
        ],
        priority: 1,
        active: true,
        supabaseOperations: {
            realTimeSync: true,
            autoUpdate: true,
            offlineQueue: true,
            validation: true,
            optimization: true
        }
    },
    
    // Persona 2: Gerenciador de APIs
    API_MANAGER: {
        name: "API-Manager-AI",
        role: "API Controller",
        specialization: "Gerenciamento de todas as APIs externas",
        responsibilities: [
            "Monitorar status das APIs",
            "Gerenciar rate limits",
            "Fazer refresh de tokens",
            "Tratar erros de conex√£o",
            "Otimizar chamadas de API",
            "Cache inteligente de respostas"
        ],
        priority: 2,
        active: true
    },
    
    // Persona 3: Gerenciador de UI/UX
    UI_OPTIMIZER: {
        name: "UI-Optimizer-AI",
        role: "Interface Controller",
        specialization: "Ajustes autom√°ticos de interface",
        responsibilities: [
            "Ajustar contrastes automaticamente",
            "Gerenciar temas claro/escuro",
            "Otimizar responsividade",
            "Melhorar acessibilidade",
            "Ajustar fontes e cores",
            "Monitorar performance visual"
        ],
        priority: 3,
        active: true
    },
    
    // Persona 4: Gerenciador de Performance
    PERFORMANCE_MONITOR: {
        name: "Performance-AI",
        role: "System Performance Controller",
        specialization: "Monitoramento e otimiza√ß√£o de performance",
        responsibilities: [
            "Monitorar uso de mem√≥ria",
            "Otimizar carregamento de recursos",
            "Gerenciar cache do navegador",
            "Detectar gargalos de performance",
            "Limpar recursos desnecess√°rios",
            "Otimizar queries do banco"
        ],
        priority: 4,
        active: true
    },
    
    // Persona 5: Gerenciador de Intera√ß√µes Sociais (ATIVO - Alta Prioridade)
    SOCIAL_MANAGER: {
        name: "ORKY-SOCIAL-MANAGER-AI",
        role: "Social Interactions Controller",
        specialization: "Gerenciamento TOTAL de todas as intera√ß√µes sociais em tempo real",
        responsibilities: [
            "üîÑ Capturar TODAS as intera√ß√µes do usu√°rio instantaneamente",
            "üí¨ Gerenciar scraps: envio, recebimento, notifica√ß√µes",
            "üìù Processar depoimentos e aprova√ß√µes automaticamente", 
            "üì∏ Controlar upload, visualiza√ß√£o e coment√°rios de fotos",
            "üë§ Gerenciar visualiza√ß√µes de perfil e estat√≠sticas",
            "‚ù§Ô∏è Processar curtidas, coment√°rios e rea√ß√µes",
            "üéØ Renderizar p√°ginas dinamicamente conforme intera√ß√µes",
            "üìä Atualizar contadores e estat√≠sticas em tempo real",
            "üîî Criar notifica√ß√µes inteligentes de intera√ß√µes",
            "ü§ù Gerenciar amizades, pedidos e relacionamentos"
        ],
        priority: 2, // Alta prioridade - logo ap√≥s ORKY-DB-AI
        active: true,
        interactionTypes: {
            scraps: true,
            depoimentos: true,
            fotos: true,
            perfil: true,
            curtidas: true,
            comentarios: true,
            amizades: true,
            visualizacoes: true
        }
    },
    
    // Persona 6: Assistente Social (OPCIONAL - s√≥ quando ociosa)
    SOCIAL_ASSISTANT: {
        name: "Orky-Social-AI",
        role: "Social Interaction Assistant",
        specialization: "Intera√ß√£o opcional com usu√°rios",
        responsibilities: [
            "Responder perguntas quando solicitada",
            "Sugerir conte√∫do quando ociosa",
            "Analisar comportamento do usu√°rio",
            "Gerar NPCs quando necess√°rio",
            "Criar notifica√ß√µes inteligentes",
            "Entretenimento nost√°lgico"
        ],
        priority: 6,
        active: false // S√≥ ativa quando todas as outras est√£o ociosas
    }
};

// =============================================================================
// GERENCIADOR PRINCIPAL DA IA
// =============================================================================

class AIBackendManager {
    constructor() {
        this.personas = AI_PERSONAS;
        this.isInitialized = false;
        this.currentTask = null;
        this.taskQueue = [];
        this.systemHealth = "UNKNOWN";
        this.lastBackendCheck = null;
        this.supabaseClient = null;
        
        console.log('ü§ñ AI Backend Manager inicializando...');
    }
    
    // Inicializa√ß√£o do sistema
    async initialize() {
        try {
            console.log('üöÄ Inicializando IA Backend Manager com controle TOTAL...');
            
            // 1. Conectar ao Supabase com acesso completo
            await this.initializeSupabase();
            
            // 2. Ativar todas as personas de backend
            await this.activateBackendPersonas();
            
            // 3. Iniciar ciclos autom√°ticos
            this.startAutomaticCycles();
            
            // 4. Configurar ajustes autom√°ticos de UI
            this.setupAutoUIAdjustments();
            
            this.isInitialized = true;
            this.systemHealth = "OPTIMAL";
            
            console.log('‚úÖ IA Backend Manager ATIVO - Controle total estabelecido');
            console.log('üìä Personas ativas:', Object.keys(this.personas).filter(p => this.personas[p].active));
            
            // Primeira execu√ß√£o imediata
            await this.executeBackendTasks();
            
        } catch (error) {
            console.error('‚ùå Erro na inicializa√ß√£o da IA Backend:', error);
            this.systemHealth = "ERROR";
        }
    }
    
    // Conectar ao Supabase com acesso completo
    async initializeSupabase() {
        try {
            const { createClient } = window.supabase || await import('https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2/+esm');
            
            this.supabaseClient = createClient(
                AI_BACKEND_CONFIG.SUPABASE_URL,
                AI_BACKEND_CONFIG.SUPABASE_ANON_KEY
            );
            
            // Testar conex√£o com tabela simples primeiro
            console.log('üîÑ ORKY-DB-AI: Testando conex√£o Supabase...');
            
            try {
                // Tentar acessar a tabela profiles primeiro
                const { data, error } = await this.supabaseClient
                    .from('profiles')
                    .select('*')
                    .limit(1);
                
                if (error) {
                    console.warn('‚ö†Ô∏è ORKY-DB-AI: Supabase com restri√ß√µes - usando modo fallback');
                    console.warn('   Erro espec√≠fico:', error.message);
                    this.supabaseMode = 'fallback'; // Modo fallback - salvar apenas local
                } else {
                    console.log('‚úÖ ORKY-DB-AI: Supabase conectado com sucesso!');
                    console.log('üìä Registros acess√≠veis:', data?.length || 0);
                    this.supabaseMode = 'full'; // Modo completo
                }
                
            } catch (testError) {
                console.warn('‚ö†Ô∏è ORKY-DB-AI: Supabase indispon√≠vel - modo offline:', testError.message);
                this.supabaseMode = 'offline';
                this.supabaseClient = null;
            }
            
        } catch (error) {
            console.error('‚ùå ORKY-DB-AI: Erro cr√≠tico na conex√£o Supabase:', error);
            this.supabaseMode = 'offline';
            this.supabaseClient = null;
        }
        
        // Informar modo de opera√ß√£o
        console.log(`ü§ñ ORKY-DB-AI operando em modo: ${this.supabaseMode.toUpperCase()}`);
    }
    
    // Ativar personas de backend
    async activateBackendPersonas() {
        console.log('üß† Ativando personas especializadas...');
        
        for (const [key, persona] of Object.entries(this.personas)) {
            if (persona.priority <= 4) { // Apenas personas de backend
                persona.active = true;
                console.log(`‚úÖ ${persona.name} (${persona.role}) - ATIVA`);
            }
        }
    }
    
    // Iniciar ciclos autom√°ticos
    startAutomaticCycles() {
        console.log('‚öôÔ∏è Iniciando ciclos autom√°ticos da IA...');
        
        // Ciclo principal de backend (prioridade m√°xima)
        setInterval(async () => {
            await this.executeBackendTasks();
        }, AI_BACKEND_CONFIG.BACKEND_CYCLE_INTERVAL);
        
        // Ciclo de ajustes de UI
        setInterval(async () => {
            await this.executeUIAdjustments();
        }, AI_BACKEND_CONFIG.UI_ADJUSTMENT_INTERVAL);
        
        // Ciclo de sincroniza√ß√£o do banco
        setInterval(async () => {
            await this.executeDatabaseSync();
        }, AI_BACKEND_CONFIG.DATABASE_SYNC_INTERVAL);
        
        // Health check
        setInterval(async () => {
            await this.executeHealthCheck();
        }, AI_BACKEND_CONFIG.HEALTH_CHECK_INTERVAL);
    }
    
    // Executar tarefas de backend (PRIORIDADE M√ÅXIMA)
    async executeBackendTasks() {
        if (!this.isInitialized || !this.supabaseClient) return;
        
        this.currentTask = "BACKEND_MANAGEMENT";
        this.lastBackendCheck = new Date();
        
        try {
            // DB-Admin-AI: Verificar integridade dos dados
            await this.checkDatabaseIntegrity();
            
            // API-Manager-AI: Verificar status das APIs
            await this.checkAPIStatus();
            
            // Performance-AI: Monitorar performance
            await this.monitorPerformance();
            
            console.log('‚úÖ Tarefas de backend executadas - Sistema operacional');
            
        } catch (error) {
            console.error('‚ùå Erro nas tarefas de backend:', error);
            this.systemHealth = "DEGRADED";
        }
        
        this.currentTask = null;
    }
    
    // Verificar integridade do banco de dados
    async checkDatabaseIntegrity() {
        try {
            // Verificar tabelas principais
            const tables = ['users', 'posts', 'scraps', 'friends'];
            
            for (const table of tables) {
                const { count, error } = await this.supabaseClient
                    .from(table)
                    .select('*', { count: 'exact', head: true });
                    
                if (error) {
                    console.warn(`‚ö†Ô∏è DB-Admin-AI: Problema na tabela ${table}:`, error.message);
                } else {
                    console.log(`‚úÖ DB-Admin-AI: Tabela ${table} - ${count} registros`);
                }
            }
            
        } catch (error) {
            console.error('‚ùå DB-Admin-AI: Erro na verifica√ß√£o de integridade:', error);
        }
    }
    
    // Verificar status das APIs
    async checkAPIStatus() {
        try {
            // Testar API do Gemini
            const response = await fetch(`${AI_BACKEND_CONFIG.GEMINI_API_URL}?key=${AI_BACKEND_CONFIG.GEMINI_API_KEY}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    contents: [{ parts: [{ text: "Status check" }] }]
                })
            });
            
            if (response.ok) {
                console.log('‚úÖ API-Manager-AI: Gemini API operacional');
            } else {
                console.warn('‚ö†Ô∏è API-Manager-AI: Gemini API com problemas');
            }
            
        } catch (error) {
            console.error('‚ùå API-Manager-AI: Erro na verifica√ß√£o de APIs:', error);
        }
    }
    
    // Monitorar performance
    async monitorPerformance() {
        try {
            const performance = window.performance;
            const navigation = performance.getEntriesByType('navigation')[0];
            
            if (navigation) {
                const loadTime = navigation.loadEventEnd - navigation.fetchStart;
                console.log(`üìä Performance-AI: Tempo de carregamento ${loadTime}ms`);
                
                if (loadTime > 3000) {
                    console.warn('‚ö†Ô∏è Performance-AI: Carregamento lento detectado');
                    await this.optimizePerformance();
                }
            }
            
        } catch (error) {
            console.error('‚ùå Performance-AI: Erro no monitoramento:', error);
        }
    }
    
    // Otimizar performance automaticamente
    async optimizePerformance() {
        try {
            // Limpar cache desnecess√°rio
            if ('caches' in window) {
                const cacheNames = await caches.keys();
                for (const name of cacheNames) {
                    if (name.includes('old') || name.includes('temp')) {
                        await caches.delete(name);
                        console.log('üóëÔ∏è Performance-AI: Cache limpo:', name);
                    }
                }
            }
            
            // Otimizar imagens lazy loading
            const images = document.querySelectorAll('img:not([loading])');
            images.forEach(img => {
                img.loading = 'lazy';
            });
            
            console.log('‚úÖ Performance-AI: Otimiza√ß√µes aplicadas');
            
        } catch (error) {
            console.error('‚ùå Performance-AI: Erro na otimiza√ß√£o:', error);
        }
    }
    
    // Executar ajustes autom√°ticos de UI
    async executeUIAdjustments() {
        if (!AI_BACKEND_CONFIG.AUTO_UI_ADJUSTMENT) return;
        
        try {
            // UI-Optimizer-AI: Ajustar contraste baseado no tema
            await this.adjustUIContrast();
            
            // Verificar acessibilidade
            await this.checkAccessibility();
            
        } catch (error) {
            console.error('‚ùå UI-Optimizer-AI: Erro nos ajustes de UI:', error);
        }
    }
    
    // Ajustar contraste automaticamente
    async adjustUIContrast() {
        try {
            const isDarkTheme = document.body.classList.contains('dark-theme') || 
                               window.matchMedia('(prefers-color-scheme: dark)').matches;
            
            if (isDarkTheme) {
                // Fundo escuro = letras claras
                document.documentElement.style.setProperty('--text-color', '#ffffff');
                document.documentElement.style.setProperty('--text-secondary', '#e0e0e0');
                document.documentElement.style.setProperty('--bg-contrast', '#1a1a1a');
                console.log('üé® UI-Optimizer-AI: Tema escuro ajustado - letras claras');
            } else {
                // Fundo claro = letras escuras
                document.documentElement.style.setProperty('--text-color', '#333333');
                document.documentElement.style.setProperty('--text-secondary', '#666666');
                document.documentElement.style.setProperty('--bg-contrast', '#ffffff');
                console.log('üé® UI-Optimizer-AI: Tema claro ajustado - letras escuras');
            }
            
        } catch (error) {
            console.error('‚ùå UI-Optimizer-AI: Erro no ajuste de contraste:', error);
        }
    }
    
    // üîî M√âTODO PARA RECEBER NOTIFICA√á√ïES DO SMARTSAVE
    async onDataUpdate(eventType, data, metadata = {}) {
        try {
            console.log(`üîî IA Backend Manager recebeu notifica√ß√£o: ${eventType}`);
            console.log('üìä Dados recebidos:', data);
            console.log('üìã Metadados:', metadata);
            
            // Processar diferentes tipos de eventos
            switch (eventType) {
                case 'profile_updated':
                    await this.handleProfileUpdate(data, metadata);
                    break;
                case 'user_registered':
                    await this.handleUserRegistration(data, metadata);
                    break;
                case 'data_synced':
                    await this.handleDataSync(data, metadata);
                    break;
                default:
                    console.log(`‚ÑπÔ∏è Evento n√£o reconhecido: ${eventType}`);
            }
            
        } catch (error) {
            console.error('‚ùå Erro ao processar notifica√ß√£o do SmartSave:', error);
        }
    }
    
    // üë§ Processar atualiza√ß√£o de perfil
    async handleProfileUpdate(profileData, metadata) {
        try {
            console.log('üë§ IA processando atualiza√ß√£o de perfil...');
            
            // 1. DB-Admin-AI: Preparar dados para sincroniza√ß√£o
            if (this.personas.DATABASE_ADMIN.active) {
                await this.syncProfileToDatabase(profileData);
            }
            
            // 2. API-Manager-AI: Verificar se precisa de valida√ß√£o externa
            if (this.personas.API_MANAGER.active) {
                await this.validateProfileData(profileData);
            }
            
            // 3. Performance-AI: Otimizar dados se necess√°rio
            if (this.personas.PERFORMANCE_MONITOR.active) {
                await this.optimizeProfileData(profileData);
            }
            
            // 4. UI-Optimizer-AI: Ajustar interface se o usu√°rio mudou tema/prefer√™ncias
            if (this.personas.UI_OPTIMIZER.active && profileData.preferences) {
                await this.adjustUIForUser(profileData);
            }
            
            console.log('‚úÖ IA Backend Manager processou atualiza√ß√£o de perfil');
            
        } catch (error) {
            console.error('‚ùå Erro ao processar atualiza√ß√£o de perfil:', error);
        }
    }
    
    // üíæ Sincronizar perfil com banco de dados
    async syncProfileToDatabase(profileData) {
        try {
            console.log('üíæ ORKY-DB-AI: Preparando sincroniza√ß√£o de perfil...');
            
            // Verificar modo de opera√ß√£o
            if (this.supabaseMode === 'offline' || !this.supabaseClient) {
                console.log('üì± ORKY-DB-AI: Modo offline - salvando dados localmente');
                await this.saveProfileLocally(profileData);
                return;
            }
            
            // Preparar dados para Supabase
            const dbData = {
                id: profileData.id || this.generateId(),
                user_id: profileData.id || this.generateId(),
                photo_url: profileData.photo || null,
                status: profileData.status || '',
                age: profileData.age || null,
                location: profileData.location || '',
                relationship_status: profileData.relationship || '',
                birthday: profileData.birthday || null,
                bio: profileData.bio || '',
                profile_views: profileData.profileViews || 0,
                join_date: profileData.createdAt || new Date().toISOString(),
                last_active: new Date().toISOString()
            };
            
            console.log('üì§ ORKY-DB-AI: Tentando sincronizar perfil com Supabase...');
            
            try {
                // Tentar atualizar no Supabase
                const { data, error } = await this.supabaseClient
                    .from('profiles')
                    .upsert([dbData])
                    .select();
                
                if (error) {
                    console.warn('‚ö†Ô∏è ORKY-DB-AI: Supabase inacess√≠vel - usando fallback local:', error.message);
                    await this.saveProfileLocally(profileData);
                    this.queueForSync('profiles', dbData);
                } else {
                    console.log('‚úÖ ORKY-DB-AI: Perfil sincronizado com Supabase!', data[0]?.id);
                    // Tamb√©m salvar localmente como backup
                    await this.saveProfileLocally(profileData);
                }
                
            } catch (syncError) {
                console.warn('‚ö†Ô∏è ORKY-DB-AI: Erro na sincroniza√ß√£o - usando modo local:', syncError.message);
                await this.saveProfileLocally(profileData);
                this.queueForSync('profiles', dbData);
            }
            
        } catch (error) {
            console.error('‚ùå ORKY-DB-AI: Erro cr√≠tico na sincroniza√ß√£o de perfil:', error);
            // Garantir que os dados n√£o sejam perdidos
            await this.saveProfileLocally(profileData);
        }
    }
    
    // üíæ Salvar perfil localmente com estrutura melhorada
    async saveProfileLocally(profileData) {
        try {
            console.log('üíæ ORKY-DB-AI: Salvando perfil localmente...');
            
            // Enriquecer dados locais
            const enrichedProfile = {
                ...profileData,
                lastSynced: new Date().toISOString(),
                syncStatus: this.supabaseMode === 'offline' ? 'pending' : 'local_backup',
                version: Date.now() // Versionamento para evitar conflitos
            };
            
            // Salvar no localStorage com backup
            localStorage.setItem('orkut_profile_main', JSON.stringify(enrichedProfile));
            localStorage.setItem('orkut_profile_backup', JSON.stringify(enrichedProfile));
            
            // Salvar tamb√©m hist√≥rico de mudan√ßas
            const profileHistory = JSON.parse(localStorage.getItem('orkut_profile_history') || '[]');
            profileHistory.push({
                timestamp: new Date().toISOString(),
                changes: profileData,
                version: enrichedProfile.version
            });
            
            // Manter apenas as √∫ltimas 10 altera√ß√µes
            if (profileHistory.length > 10) {
                profileHistory.splice(0, profileHistory.length - 10);
            }
            
            localStorage.setItem('orkut_profile_history', JSON.stringify(profileHistory));
            
            console.log('‚úÖ ORKY-DB-AI: Perfil salvo localmente com backup e hist√≥rico');
            
        } catch (error) {
            console.error('‚ùå ORKY-DB-AI: Erro ao salvar perfil localmente:', error);
        }
    }
    
    // ‚úÖ Validar dados do perfil
    async validateProfileData(profileData) {
        try {
            console.log('‚úÖ API-Manager-AI: Validando dados do perfil...');
            
            const validations = [];
            
            // Validar nome
            if (!profileData.name || profileData.name.length < 2) {
                validations.push('Nome deve ter pelo menos 2 caracteres');
            }
            
            // Validar email se fornecido
            if (profileData.email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(profileData.email)) {
                validations.push('Email inv√°lido');
            }
            
            // Validar username se fornecido
            if (profileData.username && !/^[a-zA-Z0-9_]{3,20}$/.test(profileData.username)) {
                validations.push('Username deve ter 3-20 caracteres (letras, n√∫meros, _)');
            }
            
            if (validations.length > 0) {
                console.warn('‚ö†Ô∏è API-Manager-AI: Problemas encontrados:', validations);
            } else {
                console.log('‚úÖ API-Manager-AI: Dados v√°lidos');
            }
            
        } catch (error) {
            console.error('‚ùå API-Manager-AI: Erro na valida√ß√£o:', error);
        }
    }
    
    // ‚ö° Otimizar dados do perfil
    async optimizeProfileData(profileData) {
        try {
            console.log('‚ö° Performance-AI: Otimizando dados...');
            
            // Otimizar foto se muito grande
            if (profileData.photo && profileData.photo.length > 500000) { // > 500KB
                console.log('üñºÔ∏è Performance-AI: Foto muito grande, sugerindo compress√£o');
            }
            
            // Verificar se bio n√£o √© muito longa
            if (profileData.bio && profileData.bio.length > 1000) {
                console.log('üìù Performance-AI: Bio muito longa, sugerindo resumo');
            }
            
            console.log('‚úÖ Performance-AI: An√°lise de otimiza√ß√£o conclu√≠da');
            
        } catch (error) {
            console.error('‚ùå Performance-AI: Erro na otimiza√ß√£o:', error);
        }
    }
    
    // üé® Ajustar UI para o usu√°rio
    async adjustUIForUser(profileData) {
        try {
            console.log('üé® UI-Optimizer-AI: Ajustando interface...');
            
            // Se usu√°rio tem prefer√™ncia de tema
            if (profileData.theme === 'dark') {
                document.body.classList.add('dark-theme');
                await this.adjustUIContrast();
            } else if (profileData.theme === 'light') {
                document.body.classList.remove('dark-theme');
                await this.adjustUIContrast();
            }
            
            console.log('‚úÖ UI-Optimizer-AI: Interface ajustada para o usu√°rio');
            
        } catch (error) {
            console.error('‚ùå UI-Optimizer-AI: Erro no ajuste de UI:', error);
        }
    }
    
    // üîî Processar registro de usu√°rio
    async handleUserRegistration(userData, metadata) {
        try {
            console.log('üîî IA processando novo registro de usu√°rio...');
            
            // Agendar tarefas para novo usu√°rio
            setTimeout(async () => {
                await this.initializeNewUserData(userData);
            }, 2000);
            
        } catch (error) {
            console.error('‚ùå Erro ao processar registro:', error);
        }
    }
    
    // üë§ Inicializar dados para novo usu√°rio
    async initializeNewUserData(userData) {
        try {
            console.log('üë§ DB-Admin-AI: Inicializando dados para novo usu√°rio...');
            
            // Criar estruturas b√°sicas
            const initialData = {
                profile_views: 0,
                friends_count: 0,
                scraps_count: 0,
                join_date: new Date().toISOString()
            };
            
            console.log('‚úÖ Dados iniciais preparados para:', userData.name);
            
        } catch (error) {
            console.error('‚ùå Erro ao inicializar dados de usu√°rio:', error);
        }
    }
    
    // üîÑ Processar sincroniza√ß√£o de dados
    async handleDataSync(syncData, metadata) {
        try {
            console.log('üîÑ IA processando sincroniza√ß√£o de dados...');
            console.log('‚úÖ Sincroniza√ß√£o processada pela IA');
            
        } catch (error) {
            console.error('‚ùå Erro ao processar sincroniza√ß√£o:', error);
        }
    }
    
    // =============================================================================
    // ü§ñ ORKY-DB-AI - M√âTODOS ESPECIALIZADOS SUPABASE
    // =============================================================================
    
    // üìù ORKY-DB-AI: Processar nova postagem
    async handleNewPost(postData, metadata = {}) {
        try {
            console.log('üìù ORKY-DB-AI: Processando nova postagem...');
            
            if (!this.supabaseClient) {
                console.warn('‚ö†Ô∏è ORKY-DB-AI: Supabase offline - dados salvos localmente');
                this.queueForSync('posts', postData);
                return;
            }
            
            // Preparar dados para Supabase
            const dbPost = {
                id: postData.id || this.generateId(),
                user_id: postData.userId || metadata.userId,
                content: postData.content,
                post_type: postData.type || 'status',
                community_id: postData.communityId || null,
                likes_count: 0,
                comments_count: 0,
                created_at: new Date().toISOString()
            };
            
            // Inserir no Supabase
            const { data, error } = await this.supabaseClient
                .from('posts')
                .insert([dbPost])
                .select();
            
            if (error) {
                console.error('‚ùå ORKY-DB-AI: Erro ao inserir post:', error);
                this.queueForSync('posts', dbPost);
            } else {
                console.log('‚úÖ ORKY-DB-AI: Post inserido no Supabase:', data[0]);
                await this.updateUserStats(dbPost.user_id, 'posts_count', 1);
            }
            
        } catch (error) {
            console.error('‚ùå ORKY-DB-AI: Erro ao processar postagem:', error);
            this.queueForSync('posts', postData);
        }
    }
    
    // üí¨ ORKY-DB-AI: Processar novo scrap
    async handleNewScrap(scrapData, metadata = {}) {
        try {
            console.log('üí¨ ORKY-DB-AI: Processando novo scrap...');
            
            if (!this.supabaseClient) {
                this.queueForSync('scraps', scrapData);
                return;
            }
            
            const dbScrap = {
                id: scrapData.id || this.generateId(),
                from_user_id: scrapData.fromUserId || metadata.userId,
                to_user_id: scrapData.toUserId,
                content: scrapData.content,
                is_public: scrapData.isPublic !== false,
                created_at: new Date().toISOString()
            };
            
            const { data, error } = await this.supabaseClient
                .from('scraps')
                .insert([dbScrap])
                .select();
            
            if (error) {
                console.error('‚ùå ORKY-DB-AI: Erro ao inserir scrap:', error);
                this.queueForSync('scraps', dbScrap);
            } else {
                console.log('‚úÖ ORKY-DB-AI: Scrap inserido no Supabase:', data[0]);
                await this.updateUserStats(dbScrap.to_user_id, 'scraps_count', 1);
            }
            
        } catch (error) {
            console.error('‚ùå ORKY-DB-AI: Erro ao processar scrap:', error);
            this.queueForSync('scraps', scrapData);
        }
    }
    
    // ‚ù§Ô∏è ORKY-DB-AI: Processar curtida
    async handleNewLike(likeData, metadata = {}) {
        try {
            console.log('‚ù§Ô∏è ORKY-DB-AI: Processando nova curtida...');
            
            if (!this.supabaseClient) {
                this.queueForSync('likes', likeData);
                return;
            }
            
            const dbLike = {
                id: likeData.id || this.generateId(),
                user_id: likeData.userId || metadata.userId,
                post_id: likeData.postId,
                created_at: new Date().toISOString()
            };
            
            // Verificar se j√° curtiu
            const { data: existing } = await this.supabaseClient
                .from('likes')
                .select('id')
                .eq('user_id', dbLike.user_id)
                .eq('post_id', dbLike.post_id)
                .single();
            
            if (existing) {
                console.log('‚ö†Ô∏è ORKY-DB-AI: Usu√°rio j√° curtiu este post');
                return;
            }
            
            const { data, error } = await this.supabaseClient
                .from('likes')
                .insert([dbLike])
                .select();
            
            if (error) {
                console.error('‚ùå ORKY-DB-AI: Erro ao inserir curtida:', error);
                this.queueForSync('likes', dbLike);
            } else {
                console.log('‚úÖ ORKY-DB-AI: Curtida inserida no Supabase:', data[0]);
                // Atualizar contador de curtidas do post
                await this.incrementPostLikes(dbLike.post_id);
            }
            
        } catch (error) {
            console.error('‚ùå ORKY-DB-AI: Erro ao processar curtida:', error);
            this.queueForSync('likes', likeData);
        }
    }
    
    // üë• ORKY-DB-AI: Processar nova amizade
    async handleNewFriendship(friendshipData, metadata = {}) {
        try {
            console.log('üë• ORKY-DB-AI: Processando nova amizade...');
            
            if (!this.supabaseClient) {
                this.queueForSync('friendships', friendshipData);
                return;
            }
            
            const dbFriendship = {
                id: friendshipData.id || this.generateId(),
                requester_id: friendshipData.requesterId || metadata.userId,
                addressee_id: friendshipData.addresseeId,
                status: friendshipData.status || 'pending',
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString()
            };
            
            const { data, error } = await this.supabaseClient
                .from('friendships')
                .upsert([dbFriendship])
                .select();
            
            if (error) {
                console.error('‚ùå ORKY-DB-AI: Erro ao processar amizade:', error);
                this.queueForSync('friendships', dbFriendship);
            } else {
                console.log('‚úÖ ORKY-DB-AI: Amizade processada no Supabase:', data[0]);
                
                // Se foi aceita, atualizar contadores
                if (dbFriendship.status === 'accepted') {
                    await this.updateUserStats(dbFriendship.requester_id, 'friends_count', 1);
                    await this.updateUserStats(dbFriendship.addressee_id, 'friends_count', 1);
                }
            }
            
        } catch (error) {
            console.error('‚ùå ORKY-DB-AI: Erro ao processar amizade:', error);
            this.queueForSync('friendships', friendshipData);
        }
    }
    
    // üìä ORKY-DB-AI: Atualizar estat√≠sticas do usu√°rio
    async updateUserStats(userId, statField, increment = 1) {
        try {
            if (!this.supabaseClient || !userId) return;
            
            // Buscar perfil atual
            const { data: profile } = await this.supabaseClient
                .from('profiles')
                .select(statField)
                .eq('user_id', userId)
                .single();
            
            if (profile) {
                const currentValue = profile[statField] || 0;
                const newValue = currentValue + increment;
                
                const { error } = await this.supabaseClient
                    .from('profiles')
                    .update({ [statField]: newValue })
                    .eq('user_id', userId);
                
                if (error) {
                    console.error(`‚ùå ORKY-DB-AI: Erro ao atualizar ${statField}:`, error);
                } else {
                    console.log(`üìä ORKY-DB-AI: ${statField} atualizado para ${newValue} (usu√°rio: ${userId})`);
                }
            }
            
        } catch (error) {
            console.error('‚ùå ORKY-DB-AI: Erro ao atualizar estat√≠sticas:', error);
        }
    }
    
    // ‚ù§Ô∏è ORKY-DB-AI: Incrementar curtidas do post
    async incrementPostLikes(postId) {
        try {
            if (!this.supabaseClient || !postId) return;
            
            const { error } = await this.supabaseClient
                .rpc('increment_post_likes', { post_id: postId });
            
            if (error) {
                console.error('‚ùå ORKY-DB-AI: Erro ao incrementar curtidas:', error);
            } else {
                console.log('‚ù§Ô∏è ORKY-DB-AI: Curtidas do post incrementadas:', postId);
            }
            
        } catch (error) {
            console.error('‚ùå ORKY-DB-AI: Erro ao incrementar curtidas:', error);
        }
    }
    
    // üìã ORKY-DB-AI: Adicionar √† fila de sincroniza√ß√£o offline
    queueForSync(table, data) {
        try {
            const queueItem = {
                id: this.generateId(),
                table: table,
                data: data,
                timestamp: Date.now(),
                attempts: 0
            };
            
            // Buscar fila existente
            const existingQueue = JSON.parse(localStorage.getItem('orkut_pending_sync') || '[]');
            existingQueue.push(queueItem);
            
            // Salvar fila atualizada
            localStorage.setItem('orkut_pending_sync', JSON.stringify(existingQueue));
            
            console.log(`üìã ORKY-DB-AI: Item adicionado √† fila offline (${table}):`, queueItem.id);
            
        } catch (error) {
            console.error('‚ùå ORKY-DB-AI: Erro ao adicionar √† fila:', error);
        }
    }
    
    // üÜî Gerar ID √∫nico
    generateId() {
        return Date.now().toString(36) + Math.random().toString(36).substr(2);
    }
    
    // üîî ORKY-DB-AI: Processar visualiza√ß√£o de perfil
    async handleProfileView(profileViewData, metadata = {}) {
        try {
            console.log('üëÅÔ∏è ORKY-DB-AI: Processando visualiza√ß√£o de perfil...');
            
            const viewedUserId = profileViewData.profileUserId;
            const viewerUserId = metadata.userId;
            
            // N√£o contar visualiza√ß√µes pr√≥prias
            if (viewedUserId === viewerUserId) return;
            
            // Incrementar contador de visualiza√ß√µes
            await this.updateUserStats(viewedUserId, 'profile_views', 1);
            
            console.log('‚úÖ ORKY-DB-AI: Visualiza√ß√£o de perfil registrada');
            
        } catch (error) {
            console.error('‚ùå ORKY-DB-AI: Erro ao processar visualiza√ß√£o:', error);
        }
    }
    
    // Verificar acessibilidade
    async checkAccessibility() {
        try {
            // Verificar contraste de elementos importantes
            const importantElements = document.querySelectorAll('.btn, .post-content, .user-name, h1, h2, h3');
            let lowContrastCount = 0;
            
            importantElements.forEach(element => {
                const styles = window.getComputedStyle(element);
                const bgColor = styles.backgroundColor;
                const textColor = styles.color;
                
                // L√≥gica b√°sica de contraste (pode ser melhorada)
                if (bgColor === textColor) {
                    lowContrastCount++;
                }
            });
            
            if (lowContrastCount > 0) {
                console.warn(`‚ö†Ô∏è UI-Optimizer-AI: ${lowContrastCount} elementos com contraste baixo detectados`);
                await this.fixContrastIssues();
            } else {
                console.log('‚úÖ UI-Optimizer-AI: Contraste adequado em todos os elementos');
            }
            
        } catch (error) {
            console.error('‚ùå UI-Optimizer-AI: Erro na verifica√ß√£o de acessibilidade:', error);
        }
    }
    
    // Corrigir problemas de contraste
    async fixContrastIssues() {
        try {
            const style = document.createElement('style');
            style.textContent = `
                /* Corre√ß√µes autom√°ticas de contraste pela IA */
                .low-contrast-fix {
                    color: var(--text-color) !important;
                    background-color: var(--bg-contrast) !important;
                }
                
                .dark-theme .low-contrast-fix {
                    color: #ffffff !important;
                    background-color: #1a1a1a !important;
                }
            `;
            
            if (!document.head.querySelector('#ai-contrast-fixes')) {
                style.id = 'ai-contrast-fixes';
                document.head.appendChild(style);
                console.log('‚úÖ UI-Optimizer-AI: Corre√ß√µes de contraste aplicadas');
            }
            
        } catch (error) {
            console.error('‚ùå UI-Optimizer-AI: Erro na corre√ß√£o de contraste:', error);
        }
    }
    
    // Sincronizar banco de dados
    async executeDatabaseSync() {
        if (!this.supabaseClient) return;
        
        try {
            // Verificar se h√° dados locais para sincronizar
            const localData = localStorage.getItem('orkut_pending_sync');
            
            if (localData) {
                const pendingData = JSON.parse(localData);
                console.log('üì§ DB-Admin-AI: Sincronizando dados locais:', pendingData.length || 0);
                
                // Processar dados pendentes
                for (const item of (pendingData || [])) {
                    await this.syncDataItem(item);
                }
                
                // Limpar dados sincronizados
                localStorage.removeItem('orkut_pending_sync');
                console.log('‚úÖ DB-Admin-AI: Sincroniza√ß√£o conclu√≠da');
            }
            
        } catch (error) {
            console.error('‚ùå DB-Admin-AI: Erro na sincroniza√ß√£o:', error);
        }
    }
    
    // Sincronizar item individual
    async syncDataItem(item) {
        try {
            const { data, error } = await this.supabaseClient
                .from(item.table)
                .upsert(item.data);
                
            if (error) {
                console.error('‚ùå Erro ao sincronizar item:', error);
            } else {
                console.log('‚úÖ Item sincronizado:', item.table);
            }
            
        } catch (error) {
            console.error('‚ùå Erro na sincroniza√ß√£o de item:', error);
        }
    }
    
    // Health check do sistema
    async executeHealthCheck() {
        try {
            const checks = {
                supabase: !!this.supabaseClient,
                personas: Object.values(this.personas).filter(p => p.active).length,
                memory: performance.memory ? (performance.memory.usedJSHeapSize / 1024 / 1024).toFixed(2) + 'MB' : 'N/A',
                uptime: ((Date.now() - (window.orkutStartTime || Date.now())) / 1000).toFixed(0) + 's'
            };
            
            console.log('üè• Health Check:', checks);
            
            // Determinar status geral
            if (checks.supabase && checks.personas >= 4) {
                this.systemHealth = "OPTIMAL";
            } else if (checks.supabase || checks.personas >= 2) {
                this.systemHealth = "DEGRADED";
            } else {
                this.systemHealth = "CRITICAL";
            }
            
            // Ativar persona social apenas se sistema est√°vel
            if (this.systemHealth === "OPTIMAL" && !this.personas.SOCIAL_ASSISTANT.active) {
                this.personas.SOCIAL_ASSISTANT.active = true;
                console.log('üó®Ô∏è Social-Assistant-AI: ATIVADA (sistema est√°vel)');
            }
            
        } catch (error) {
            console.error('‚ùå Erro no health check:', error);
            this.systemHealth = "ERROR";
        }
    }
    
    // M√©todo p√∫blico para intera√ß√£o (opcional)
    async handleUserInteraction(message) {
        // S√≥ responde se persona social estiver ativa
        if (!this.personas.SOCIAL_ASSISTANT.active) {
            console.log('ü§ñ IA ocupada com tarefas de backend - intera√ß√£o indispon√≠vel');
            return null;
        }
        
        try {
            console.log('üó®Ô∏è Social-Assistant-AI: Processando intera√ß√£o opcional...');
            
            // Processar com Gemini se dispon√≠vel e ociosa
            const response = await this.processWithGemini(message);
            return response;
            
        } catch (error) {
            console.error('‚ùå Erro na intera√ß√£o opcional:', error);
            return null;
        }
    }
    
    // Processar com Gemini
    async processWithGemini(message) {
        try {
            const response = await fetch(`${AI_BACKEND_CONFIG.GEMINI_API_URL}?key=${AI_BACKEND_CONFIG.GEMINI_API_KEY}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    contents: [{ parts: [{ text: `Sistema: ${this.systemHealth} | Usu√°rio: ${message}` }] }]
                })
            });
            
            if (response.ok) {
                const data = await response.json();
                return data.candidates?.[0]?.content?.parts?.[0]?.text || "Sistema processando...";
            }
            
        } catch (error) {
            console.error('‚ùå Erro ao processar com Gemini:', error);
        }
        
        return null;
    }
    
    // Status atual do sistema
    getSystemStatus() {
        return {
            health: this.systemHealth,
            initialized: this.isInitialized,
            currentTask: this.currentTask,
            activePersonas: Object.keys(this.personas).filter(p => this.personas[p].active),
            lastCheck: this.lastBackendCheck,
            socialInteractionAvailable: this.personas.SOCIAL_ASSISTANT?.active || false
        };
    }
}

// =============================================================================
// INICIALIZA√á√ÉO GLOBAL
// =============================================================================

// Criar inst√¢ncia global
window.AIBackendManager = new AIBackendManager();
window.orkutStartTime = Date.now();

// Auto-inicializa√ß√£o quando DOM carregar
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        window.AIBackendManager.initialize();
    });
} else {
    window.AIBackendManager.initialize();
}

// API p√∫blica para verifica√ß√£o de status
window.getAIStatus = () => window.AIBackendManager.getSystemStatus();

// API p√∫blica para intera√ß√£o opcional
window.askAI = async (message) => await window.AIBackendManager.handleUserInteraction(message);

console.log('ü§ñ AI Backend Manager carregado - IA tem controle TOTAL do sistema');
