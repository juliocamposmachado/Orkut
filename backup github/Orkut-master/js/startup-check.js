// Orkut Retr√¥ - Verificador de Inicializa√ß√£o
// Script para diagnosticar e verificar se todos os sistemas est√£o funcionando

console.log('üöÄ Iniciando verifica√ß√£o de sistema...');

// Verificar se o SmartSave est√° funcionando
function checkSmartSave() {
    console.log('üîç Verificando SmartSave...');
    
    if (typeof window.SmartSave === 'undefined') {
        console.warn('‚ö†Ô∏è SmartSave n√£o encontrado!');
        return false;
    }
    
    if (typeof window.getCurrentUser !== 'function') {
        console.warn('‚ö†Ô∏è Fun√ß√£o getCurrentUser n√£o encontrada!');
        return false;
    }
    
    if (typeof window.saveProfile !== 'function') {
        console.warn('‚ö†Ô∏è Fun√ß√£o saveProfile n√£o encontrada!');
        return false;
    }
    
    // Testar cria√ß√£o de usu√°rio padr√£o
    try {
        const testUser = window.SmartSave.createDefaultUser();
        if (!testUser || !testUser.name) {
            console.warn('‚ö†Ô∏è Erro ao criar usu√°rio padr√£o!');
            return false;
        }
        console.log('‚úÖ SmartSave funcionando corretamente!');
        return true;
    } catch (error) {
        console.error('‚ùå Erro no SmartSave:', error);
        return false;
    }
}

// Verificar se os dados do usu√°rio est√£o sendo carregados
function checkUserData() {
    console.log('üîç Verificando dados do usu√°rio...');
    
    const user = window.getCurrentUser();
    if (!user) {
        console.warn('‚ö†Ô∏è Nenhum usu√°rio encontrado!');
        return false;
    }
    
    console.log('üë§ Usu√°rio carregado:', {
        name: user.name,
        username: user.username,
        hasPhoto: !!user.photo,
        status: user.status,
        profileViews: user.profileViews
    });
    
    console.log('‚úÖ Dados do usu√°rio carregados com sucesso!');
    return true;
}

// Verificar se os elementos da interface est√£o sendo atualizados
function checkUIUpdates() {
    console.log('üîç Verificando atualiza√ß√µes da interface...');
    
    const elementsToCheck = [
        'headerUserName',
        'sidebarUserName', 
        'profileName'
    ];
    
    let updatedElements = 0;
    
    elementsToCheck.forEach(id => {
        const element = document.getElementById(id);
        if (element && element.textContent && element.textContent !== 'Usu√°rio') {
            updatedElements++;
            console.log(`‚úÖ ${id}: ${element.textContent}`);
        } else {
            console.log(`‚ö†Ô∏è ${id}: n√£o atualizado ou n√£o encontrado`);
        }
    });
    
    if (updatedElements > 0) {
        console.log(`‚úÖ ${updatedElements}/${elementsToCheck.length} elementos da interface atualizados!`);
        return true;
    } else {
        console.warn('‚ö†Ô∏è Nenhum elemento da interface foi atualizado!');
        return false;
    }
}

// Verificar conectividade com o banco (simulado)
function checkDatabaseConnection() {
    console.log('üîç Verificando conex√£o com banco de dados...');
    
    // Simular verifica√ß√£o de conex√£o
    const hasConnection = navigator.onLine;
    
    if (hasConnection) {
        console.log('‚úÖ Conex√£o com internet dispon√≠vel');
        console.log('üì° Sistema pronto para sincroniza√ß√£o com Supabase');
        return true;
    } else {
        console.warn('‚ö†Ô∏è Sem conex√£o com internet - funcionando offline');
        console.log('üíæ Dados sendo salvos localmente');
        return false;
    }
}

// Verificar localStorage
function checkLocalStorage() {
    console.log('üîç Verificando localStorage...');
    
    try {
        // Testar se localStorage est√° dispon√≠vel
        localStorage.setItem('test', 'test');
        localStorage.removeItem('test');
        
        // Verificar dados existentes
        const userData = localStorage.getItem('orkutUser');
        const syncQueue = localStorage.getItem('smartSave_syncQueue');
        
        console.log('‚úÖ localStorage funcionando');
        console.log('üì¶ Dados do usu√°rio:', userData ? 'encontrados' : 'n√£o encontrados');
        console.log('üîÑ Fila de sincroniza√ß√£o:', syncQueue ? 'ativa' : 'vazia');
        
        return true;
    } catch (error) {
        console.error('‚ùå Erro no localStorage:', error);
        return false;
    }
}

// Relat√≥rio completo do sistema
function generateSystemReport() {
    console.log('\nüìã RELAT√ìRIO COMPLETO DO SISTEMA');
    console.log('================================');
    
    const checks = {
        smartSave: checkSmartSave(),
        userData: checkUserData(), 
        uiUpdates: checkUIUpdates(),
        database: checkDatabaseConnection(),
        localStorage: checkLocalStorage()
    };
    
    const passed = Object.values(checks).filter(Boolean).length;
    const total = Object.keys(checks).length;
    
    console.log(`\nüéØ RESULTADO: ${passed}/${total} verifica√ß√µes aprovadas`);
    
    if (passed === total) {
        console.log('üéâ SISTEMA TOTALMENTE FUNCIONAL! üéâ');
        console.log('üíú Orkut 2025 est√° pronto para uso!');
        
        // Mostrar notifica√ß√£o de sucesso
        if (typeof showNotification === 'function') {
            showNotification(
                'Sistema Operacional! üéâ',
                'Todos os componentes est√£o funcionando perfeitamente',
                'üíú'
            );
        }
    } else {
        console.log('‚ö†Ô∏è SISTEMA PARCIALMENTE FUNCIONAL');
        console.log('Alguns componentes podem n√£o estar funcionando corretamente');
        
        // Mostrar quais verifica√ß√µes falharam
        Object.entries(checks).forEach(([check, passed]) => {
            if (!passed) {
                console.log(`‚ùå Falha em: ${check}`);
            }
        });
        
        if (typeof showNotification === 'function') {
            showNotification(
                'Sistema Parcial ‚ö†Ô∏è',
                'Algumas funcionalidades podem estar limitadas',
                'üîß'
            );
        }
    }
    
    return { passed, total, checks };
}

// Executar verifica√ß√£o quando a p√°gina carregar
document.addEventListener('DOMContentLoaded', function() {
    // Aguardar um pouco para todos os scripts carregarem
    setTimeout(() => {
        const report = generateSystemReport();
        
        // Salvar relat√≥rio para debug
        window.orkutSystemReport = report;
        
        // Adicionar informa√ß√µes extras ao console para debug
        console.log('\nüîß DEBUG INFO:');
        console.log('Current page:', window.getCurrentPage ? window.getCurrentPage() : 'unknown');
        console.log('User agent:', navigator.userAgent);
        console.log('Viewport:', `${window.innerWidth}x${window.innerHeight}`);
        console.log('Local storage size:', JSON.stringify(localStorage).length + ' chars');
        
    }, 2000); // 2 segundos para garantir que tudo carregou
});

// Fun√ß√£o para executar verifica√ß√£o manual
window.runSystemCheck = generateSystemReport;

console.log('‚úÖ Verificador de sistema carregado! Digite runSystemCheck() para executar manualmente.');
